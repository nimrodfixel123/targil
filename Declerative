pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile'
            label 'zip-job-docker'
            args '--privileged'
        }
    }
    stages {
        stage('Build') {
            steps {
                sh 'python3 /tmp/zip_job.py'
            }
        }
        stage('Publish') {
            steps {
                script {
                    // Get the VERSION environment variable from the Docker image
                    def version = sh(returnStdout: true, script: 'echo $VERSION').trim()
                    // Set GitHub repository URL, user, and password
                    def repositoryUrl = "https://github.com/nimrodfixel123/targil.git"
                    def user = "nimrodfixel123"
                    def password = "kaleidoo1!"
                    // Clone the GitHub repository
                    sh "git clone ${repositoryUrl} repo"
                    dir('repo') {
                        // Create a new branch for the artifacts
                        sh "git checkout -b artifacts/${version}"
                        // Copy all zip files to the repository
                        sh "find .. -name '*.zip' -exec cp {} . \\;"
                        // Add, commit, and push the changes
                        sh "git add ."
                        sh "git commit -m 'Add artifacts for version ${version}'"
                        withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                            sh "git push origin artifacts/${version}"
                }
            }
        }
        stage('Report') {
            steps {
                mail to: 'nimrodfix@gmail.com',
                     subject: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]': ${currentBuild.currentResult}",
                     body: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' finished with result: ${currentBuild.currentResult}"
            }
        }
    }}
    post {
        always {
            cleanWs()
        }
    }
}
}